#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <omp.h>

// Dynamical array
typedef struct {
    int *array;
    size_t used;
    size_t size;
} ARRAY;


void initArray(ARRAY *a, size_t initialSize) {
    a->array = (int * ) malloc(initialSize * sizeof(int));
    //if (a->array == NULL) {
    //    printf("ERROR: Memory allocation failure!\n");
    //    exit(1);
    //}
    a->used = 0;
    a->size = initialSize;
}

void insertArray(ARRAY *a, int element) {
    if (a->used == a->size) {
        a->size *= 2;
        a->array = (int * )realloc(a->array, a->size * sizeof(int));
      }
      a->array[a->used++] = element;
}

void freeArray(ARRAY *a) {
    free(a->array);
    a->array = NULL;
    a->used = a->size = 0;
}

// Save indices or particles in sphere
void selec_in_rad(float *px1, float *px2, float *px3, float cx1, float cx2,
                  float cx3, int Np, float rad, ARRAY *indx) {
    int i;
    float dist;

    for(i=0; i<Np; i++) {
        dist = pow((px1[i] - cx1), 2) +\
               pow((px2[i] - cx2), 2) +\
               pow((px3[i] - cx3), 2);
        if(dist<rad) {
            insertArray(indx, i);
        }
    }
    printf("element %d\n", indx->array[9]); // print number of elements
    printf("there are in total %zu indices \n", indx->used); // print number of elements
}


float mass_in_rad(float *pmass, ARRAY *indx) {
    int i;
    float masstot=0.0;

    for(i=0; i<indx->used; i++) {
        masstot += pmass[indx->array[i]];
    }
    return masstot;
}


float cal_shmr_gal(float *px1, float *px2, float *px3, float cx1, float cx2, float cx3,
                   float *pmass, int Np, float radmax) {
    //int i;
    float pmassmax = .0;
    ARRAY indx;
    initArray(&indx, 5);
    printf(":::::::: STEP 1 :::::::: \n");

    selec_in_rad(px1, px2, px3, cx1, cx2, cx3, Np, radmax, &indx);
    pmassmax = mass_in_rad(pmass, &indx);
    printf("stellar Mvir: %f \n", pmassmax/pow(10, 10));





    return 3.141592;
}
